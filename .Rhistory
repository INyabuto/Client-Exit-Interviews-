orgUnit = sp_transformed$orgUnit,
eventDate = sp_transformed$eventDate, stringsAsFactors = F)
payload$dataValues <- lapply(sp_transformed_list, function(x) eventDataValues(x))
payload <- payload %>% select(-nrow.sp_transformed.)
return(payload)
}
test3 <- cei_payload(cambodia,program_id = "xyz")
sp_transformed_list
lapply(sp_transformed_list,function(x) eventDataValues(x))
lapply(unlist(sp_transformed_list),function(x) eventDataValues(x))
str(sp_transformed_list)
str(sp_transformed_list)[[1]]
lapply(cambodia$dataValues,function(x) split(x,seq(length(x))))
warnings()
test3 <- lapply(cambodia$dataValues,function(x) split(x,seq(length(x))))
test3[[1]]
test3[[2]]
test3 <- lapply(cambodia$dataValues,function(x) split(x,seq(nrow(x))))
test3$1
test3[[1]]
test3[[2]]
test3[[2]][[1]]
lapply(test3,function(x) eventDataValues(x))
lapply(test3,function(x) head(x))
#'
#'A function to generate the payload
#'@param sp_transformed a df
#'@param program_id string
#'@retun events
cei_payload <- function(sp_transformed, program_id){
payload <- data.frame(program = rep(program_id), nrow(sp_transformed),
event = sp_transformed$event,
orgUnit = sp_transformed$orgUnit,
eventDate = sp_transformed$eventDate, stringsAsFactors = F)
payload <- payload %>% select(-nrow.sp_transformed.)
return(payload)
}
cei_payload(cambodia,"XSY")
cei_des
names(cei_des)
cei_des_map <- function(df,cei_des){
df$dataElement <- plyr::mapvalues(df$dataElement,
from = cei_des$dataElement$name,
to = cei_des$dataElement$id,
warn_missing = F)
}
test2
test2 %>% cei_des_map()
test2 %>% cei_des_map(cei_des)
test2 %>% cei_des_map(cei_des)
me <- test2 %>% cei_des_map(cei_des)
me
cei_des_map <- function(df,cei_des){
df$dataElement <- plyr::mapvalues(df$dataElement,
from = cei_des$dataElement$name,
to = cei_des$dataElement$id,
warn_missing = F)
return(df)
}
me <- test2 %>% cei_des_map(cei_des)
me
me <- test2 %>% cei_des_map(test2,cei_des)
lapply(test2, function(x) cei_des_map(x,cei_des))
baseurl
loginDHIS2(baseurl,username,password)
cei_des_r <- GET(paste0(baseurl,"api/programStages/ftFE8kmzbTn?fields=name,programStageDataElements[id,name,dataElement[id,name]]"))
cei_des <- fromJSON(content(cei_des_r,"text"))$programStageDataElements
cei_des$dataElement$name
cei_transform <- function(x,rate,cei_des){
# convert to wide and remap
x$dataValues <- lapply(x$dataValues, function(x) dv_wide(x,cei_des = cei_des))
# covert the currency
x$dataValues <- lapply(x$dataValues, function(x) cei_events_usd(x,rate = rate))
# reshape the data to long
x$dataValues <- lapply(x$dataValues, function(x) eventDataValues(x))
# remap the DES names to uids
x$dataValues <- lapply(x$dataValues, function(x) cei_des_map(x, cei_des = cei_des))
return(x)
}
test4 <- cei_transform(cambodia, rate = 3970.42, cei_des = cei_des)
# reshape the data to long
cambodia$dataValues <- lapply(cambodia$dataValues, function(x) eventDataValues(x))
cambodia$dataValues[[1]]
# remap the DES names to uids
cambodia$dataValues <- lapply(cambodia$dataValues, function(x) cei_des_map(x, cei_des = cei_des))
cambodia$dataValues[[1]]
cei_transform <- function(x,rate,cei_des){
# convert to wide and remap
x$dataValues <- lapply(x$dataValues, function(x) dv_wide(x,cei_des = cei_des))
# covert the currency
x$dataValues <- lapply(x$dataValues, function(x) cei_events_usd(x,rate = rate))
# reshape the data to long
x$dataValues <- lapply(x$dataValues, function(x) eventDataValues(x))
# remap the DES names to uids
x$dataValues <- lapply(x$dataValues, function(x) cei_des_map(x, cei_des = cei_des))
return(x)
}
cei_transform(test)
cei_transform(cambodia,rate=1,cei_des = cei_des)
#'filter out events from cambodia
cambodia <- dplyr::filter(all_events, orgUnit %in% cambodia_ous$id)
cambodia
cei_transform(cambodia,rate=1,cei_des)
test <- cei_transform(cambodia,rate=1,cei_des)
test$dataValues[[1]]
test
test$dataValues
#'
#'A function to generate the payload
#'@param sp_transformed a df
#'@param program_id string
#'@retun events
cei_payload <- function(sp_transformed, program_id){
payload <- data.frame(program = rep(program_id), nrow(sp_transformed),
event = sp_transformed$event,
orgUnit = sp_transformed$orgUnit,
eventDate = sp_transformed$eventDate, stringsAsFactors = F)
payload <- payload %>% select(-nrow.sp_transformed.)
payload$dataValues <- sp_transformed$dataValues
return(payload)
}
test
cei_payload(test,"xyz")
test2 <- cei_payload(test,"xyz")
head(test2,1)
head(test2,2)
head(test2,1)
toJSON(head(test2,1))
cambodia$dataValues[[1]]
test3 <- cei_transform(cambodia,rate = 10000,cei_des = cei_des)
test3$dataValues[[1]]
tail(test3$dataValues[[1]])
cei_payload(test3,"XYZ")
test4 <- cei_payload(test3,"XYZ")
head(test4,1)
cambodia$program
#'
#'Tranform the ammount to USD
cambodia_transformed <- cei_transform(cambodia,rate = 3970.42, cei_des = cei_des)
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
cambodia_payload$program
cambodia_payload$eventDate
loginDHIS2(baseurl,username,password)
baseurl
# send the payload
d <- PUT(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload), auto_unbox = T),
content_type_json())
d
content(d,"text")
# send the payload
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload), auto_unbox = T),
content_type_json())
d
content(d,"text")
cambodia_payload$dataValues[[1]]
tail(cambodia_payload$dataValues[[1]])
#'
#'A function to convert transform event Data values to a df
#'Convert the cost of service
#'@param dv A list of events data values
#'@param rate Exchange rate
#'@param cei_des a data fram with CEI data elements and uids
#'@source dv_wd()
#'@return a dataframe with dataValues
cei_events_usd <- function(dv, rate = 1){
tryCatch({
dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?` <- as.numeric(dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?`)
#'convert to usd
dv$`CEI SRH FP TRK - Cost of Service (USD)` <- dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?` * 1/rate
}, error = function(e){cat("ERROR :",conditionMessage(e), "\n")})
return(dv)
}
#'A function to convert the events to datavaleues
#'@param sp_df a dataframe with wide events
#'@retun a dataframe with two columns dataElement, value
eventDataValues <- function(sp_df){
#gather
sp_df <- tidyr::gather(sp_df,dataElement,value,
1:length(names(sp_df)))
return(sp_df)
}
cei_transform <- function(x,rate,cei_des){
# convert to wide and remap
x$dataValues <- lapply(x$dataValues, function(x) dv_wide(x,cei_des = cei_des))
# covert the currency
x$dataValues <- lapply(x$dataValues, function(x) cei_events_usd(x,rate = rate))
# reshape the data to long
x$dataValues <- lapply(x$dataValues, function(x) eventDataValues(x))
# remap the DES names to uids
x$dataValues <- lapply(x$dataValues, function(x) cei_des_map(x, cei_des = cei_des))
return(x)
}
#'
#'Tranform the ammount to USD
cambodia_transformed <- cei_transform(cambodia,rate = 3970.42, cei_des = cei_des)
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
cambodia_payload$dataValues[[1]]
tail(cambodia_payload$dataValues[[1]])
# send the payload
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload), auto_unbox = T),
content_type_json())
d
content(d,"text")
loginDHIS2(baseurl,username,password)
# send the payload
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload), auto_unbox = T),
content_type_json())
d
content(d,"text")
cambodia_payload
head(cambodia_payload)
cambodia_split <- split(cambodia_payload, seq(nrow(cambodia_payload)/2))
cambodia_split$`1`
cambodia_split$`238`
cambodia_split <- split(cambodia_payload, as.numeric(row.names(cambodia_payload)) - 1 %/% 250)
cambodia_split$`1`
cambodia_split
length(cambodia_split$`1`)
cambodia_split <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload))-) %/% 250)
cambodia_split <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload))-1) %/% 250)
cambodia_split$`0`
cambodia_split$`1`
nrow(cambodia_split$1)
nrow(cambodia_split$`1`)
nrow(cambodia_split$`0`)
loginDHIS2(baseurl,username,password)
cambodia_split <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload))-1) %/% 100)
cambodia_split$`0`
httr::cache_info(d)
row.names(cambodia_payload)
# break the payload into a chunck of 100
cambodia_payload <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload)) - 1) %/% 100)
length(cambodia_payload)
seq_along(5)
1:seq_along(5)
seq_along(1:5)
cambodia_payload[[1]]
cambodia_payload[[6]]
cambodia_payload[[5]]
loginDHIS2(baseurl,username,password)
# break the payload into a chunck of 100
cambodia_payload <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload)) - 1) %/% 100)
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
# break the payload into a chunck of 100
cambodia_payload <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload)) - 1) %/% 100)
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(5))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(1)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
close(pb)
}
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(5))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(1)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
close(pb)
}
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(5))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(1)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
}
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(cambodia_payload))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(1)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
}
d
content(d,"text")
close(pb)
test <- GET(paste0(baseurl,"api/events?program=H0ARClgSPpF&paging=false&lastUpdated=2019-03-05"))
test
test <- fromJSON(content(test,"text"))
test$events
nrow(test$events)
source('~/.active-rstudio-document')
baseurl
# dest server
baseurl.dest = "https://sandbox.psi-mis.org/"
source('~/.active-rstudio-document')
baseurl
# get user
loginDHIS2(baseurl,username,password)
password
r <- GET(paste0(baseurl,"api/users/me"))
r
content(r,"text")
r <- GET(paste0(baseurl,"api/users/jkj1vjLLosx"))
r
content(r,"text")
user <- fromJSON(content(r,"text"))
user$organisationUnits
# get psi orgUnit
rg <- GET(paste0(baseurl,"api/users/NwwXXzvSAdK"))
user2 <- fromJSON(content(rg,"text"))
user2$organisationUnits
user$organisationUnits <- rbind(user$organisationUnits,user2$organisationUnits)
user$organisationUnits
# get user
loginDHIS2(baseurl,username,password)
d <- PUT(paste0(baseurl,"api/metadata?&importStrategy=UPDATE"),
body = toJSON(list(users = list(user)), auto_unbox = T),
content_type_json())
d
content(d,"text")
d <- POST(paste0(baseurl,"api/metadata?&importStrategy=UPDATE"),
body = toJSON(list(users = list(user)), auto_unbox = T),
content_type_json())
d
content(d,"text")
user$organisationUnits <- user2$organisationUnits
user$organisationUnits
d <- POST(paste0(baseurl,"api/metadata?&importStrategy=UPDATE"),
body = toJSON(list(users = list(user)), auto_unbox = T),
content_type_json())
d
?Sys.sleep
## set up ========================================================
baseurl <- "https://clone.psi-mis.org/"
base = substr(baseurl, 9,25)
username <- keyringr::get_kc_account(base, type = 'internet')
password <- keyringr::decrypt_kc_pw(base, type = "internet")
baseurl
username
password
loginDHIS2(baseurl,username,password)
source("/Users/isaiahnyabuto/Documents/PSI Workspace/functions.R")
loginDHIS2(baseurl,username,password)
cei_des_r <- GET(paste0(baseurl,"api/programStages/ftFE8kmzbTn?fields=name,programStageDataElements[id,name,dataElement[id,name]]"))
cei_des <- fromJSON(content(cei_des_r,"text"))$programStageDataElements
#'filter out events from cambodia
cambodia <- dplyr::filter(all_events, orgUnit %in% cambodia_ous$id)
cei_des
tail(cei_des)
#'filter out events from cambodia
cambodia <- dplyr::filter(all_events, orgUnit %in% cambodia_ous$id)
#'
#'Tranform the ammount to USD
cambodia_transformed <- cei_transform(cambodia,rate = 3970.42, cei_des = cei_des)
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
# break the payload into a chunck of 100
cambodia_payload <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload)) - 1) %/% 100)
cambodia_payload$`1`
length(cambodia_payload)
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
pb
baseurl
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(cambodia_payload))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(180)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
}
d
content(d,"text")
cambodia$event[cambodia$event == "cvlRFIhIvfQ"]
dplyr::filter(cambodia, cambodia$event = "cvlRFIhIvfQ")
dplyr::filter(cambodia, cambodia$event == "cvlRFIhIvfQ")
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
fromJSON(content(d,"text"))
close(pb)
cei_not_updated <- fromJSON(content(d,"text"))$reference
cei_not_updated
cei_not_updated <- fromJSON(content(d,"text"))
cei_not_updated
cei_not_updated$response$responseType
cei_not_updated$response$imported
cei_not_updated$response$importSummaries$reference
dplyr::filter(cei_not_updated$response$importSummaries,status != "SUCCESS")
cei_not_updated <- fromJSON(content(d,"text"))$response$importSummaries
cei_not_updated
rm(cei_not_updated)
cei_d <- fromJSON(content(d,"text"))$response$importSummaries
cei_not_imported <- filter(cei_d, status != "SUCCESS")
cei_not_imported
# filter the events from the payload
cambodia_to_reupdate <- filter(cambodia_payload, event %in% cei_not_imported$reference)
cambodia_to_reupdate
nrow(cambodia_to_reupdate)
loginDHIS2(baseurl,username,password)
d2 <- POST(paste0(baseurl, "api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_to_reupdate), auto_unbox = T),
content_type_json())
d2
content(d2,"text")
head(toJSON(list(events = cambodia_to_reupdate), auto_unbox = T))
cambodia_to_reupdate_js <- toJSON(list(events = cambodia_to_reupdate), auto_unbox = T)
getwd()
write_json(cambodia_to_reupdate_js,"cambodia_to_reupdate.json")
head(cambodia_to_reupdate_js)
?write_json
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
nrow(cambodia_payload)
baseurl
loginDHIS2(baseurl,username,password)
cei_des_r <- GET(paste0(baseurl,"api/programStages/ftFE8kmzbTn?fields=name,programStageDataElements[id,name,dataElement[id,name]]"))
cei_des <- fromJSON(content(cei_des_r,"text"))$programStageDataElements
cei_des
#'filter out events from cambodia
cambodia <- dplyr::filter(all_events, orgUnit %in% cambodia_ous$id)
#'
#'Tranform the ammount to USD
cambodia_transformed <- cei_transform(cambodia,rate = 3970.42, cei_des = cei_des)
# prepare the payload
cambodia_payload <- cei_payload(cambodia_transformed, program_id = "H0ARClgSPpF")
# break the payload into a chunck of 100
cambodia_payload <- split(cambodia_payload, (as.numeric(row.names(cambodia_payload)) - 1) %/% 100)
cambodia_payload[[1]]
cambodia_payload[[7]]
# send the payload
pb <- txtProgressBar(min = 0, max = length(cambodia_payload), initial = 0, style = 3)
for (i in seq_along(1:length(cambodia_payload))) {
d <- POST(paste0(baseurl,"api/events?importStrategy=UPDATE"),
body = toJSON(list(events = cambodia_payload[[i]]), auto_unbox = T),
content_type_json())
Sys.sleep(180)
loginDHIS2(baseurl,username,password)
setTxtProgressBar(pb,i)
}
d
content(d,"text")
fromJSON(content(d,"text"))
cambodia_payload[5]
cambodia_payload[5][c(15,23,50),]
cambodia_payload[5][,c(15,23,50)]
cambodia_payload[5][,15]
cambodia_payload$`4`
cambodia_payload$`4`[,c(15,23,50)]
cambodia_payload$`4`[c(15,23,50),]
d
c(1:30)
test <- c(1:30)
class(test)
as.character(test)
#'
#'A function to convert transform event Data values to a df
#'Convert the cost of service
#'@param dv A list of events data values
#'@param rate Exchange rate
#'@param cei_des a data fram with CEI data elements and uids
#'@source dv_wd()
#'@return a dataframe with dataValues
cei_events_usd <- function(dv, rate = 1){
tryCatch({
dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?` <- as.numeric(dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?`)
#'convert to usd
dv$`CEI SRH FP TRK - Cost of Service (USD)` <- dv$`CEI SRH FP TRK - How much did you pay out of pocket for your services today?` * 1/rate
dv$`CEI SRH FP TRK - Cost of Service (USD)` <- as.character(dv$`CEI SRH FP TRK - Cost of Service (USD)`)
}, error = function(e){cat("ERROR :",conditionMessage(e), "\n")})
return(dv)
}
#' Function to update the dataValues
#' @param x events
#' @param rate country usd rate
#' @param cei_des client exit interviews data elements to remap
#' @return the update events
cei_transform <- function(x,rate,cei_des){
# convert to wide and remap
x$dataValues <- lapply(x$dataValues, function(x) dv_wide(x,cei_des = cei_des))
# covert the currency
x$dataValues <- lapply(x$dataValues, function(x) cei_events_usd(x,rate = rate))
# reshape the data to long
x$dataValues <- lapply(x$dataValues, function(x) eventDataValues(x))
# remap the DES names to uids
x$dataValues <- lapply(x$dataValues, function(x) cei_des_map(x, cei_des = cei_des))
return(x)
}
fromJSON(content(d,"text"))
head(cambodia_payload,1)
fromJSON(content(d,"text"))
head(cambodia_payload,50)
cambodia_payload[[50]]
cambodia_payload$`4`[50]
cambodia_payload$`4`[50,]
toJSON(list(events = cambodia_payload$`4`[50,]))
password
loginDHIS2(baseurl,username,password)
